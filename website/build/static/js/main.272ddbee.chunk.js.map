{"version":3,"sources":["App.js","index.js"],"names":["darkTheme","createTheme","palette","mode","App","useState","currentAccount","setCurrentAccount","mining","setMining","totalWaves","setTotalWaves","contractABI","abi","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","getTotalWaves","count","toNumber","error","connectWallet","alert","disconnectWallet","params","eth_accounts","wave","waveTxn","hash","wait","useEffect","ThemeProvider","theme","CssBaseline","Paper","style","height","className","Button","variant","onClick","CircularProgress","color","Alert","severity","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.272ddbee.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport {\n  Alert,\n  createTheme,\n  CircularProgress,\n  Button,\n  Paper,\n  CssBaseline,\n  ThemeProvider,\n  styled,\n} from \"@mui/material\";\nimport \"./App.css\";\nimport abi from \"./utils/wavePortal.json\";\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: \"dark\",\n  },\n});\n\n// Lets bring in a custom\n\nexport default function App() {\n  /*\n   * Just a state variable we use to store our user's public wallet.\n   */\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [mining, setMining] = useState(false);\n  const [totalWaves, setTotalWaves] = useState(0);\n  const contractAddress = \"0x62eb0Fd10B84A15d9b87d834DE0ee55a235A8539\";\n  const contractABI = abi.abi;\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask\");\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n      } else {\n        console.log(\"No authorized account found\");\n      }\n\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const wavePortalContract = new ethers.Contract(\n        contractAddress,\n        contractABI,\n        signer\n      );\n\n      const count = await wavePortalContract.getTotalWaves();\n      console.log(\"Retrieved total wave count...\", count.toNumber());\n\n      setTotalWaves(count.toNumber());\n    } catch (err) {\n      console.error(\"FUCK!\");\n      // throw new Error(err);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get Metamask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const disconnectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get Metamask! Can't disconnect whats not there!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n        params: [\n          {\n            eth_accounts: {},\n          },\n        ],\n      });\n      console.log(accounts);\n      setCurrentAccount(\"\");\n      console.log(\"Disconnected\", accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum && currentAccount !== \"\") {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        /*\n         * Execute the actual wave from your smart contract\n         */\n        const waveTxn = await wavePortalContract.wave();\n        setMining(true);\n\n        console.log(\"Mining...\", waveTxn.hash);\n        // I guess we can throw in some sort of while mining flag to show a spinner\n        await waveTxn.wait();\n        setMining(false);\n        console.log(\"Mined -- \", waveTxn.hash);\n\n        const count = await wavePortalContract.getTotalWaves();\n        setTotalWaves(count.toNumber());\n        console.log(count);\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  /*\n   * This runs our function when the page loads.\n   */\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <CssBaseline />\n      <Paper style={{ height: \"100vh\" }}>\n        <div className='mainContainer'>\n          <div className='dataContainer'>\n            <div className='header'>ðŸ‘‹ Hey there!</div>\n\n            <div className='bio'>\n              Connect your Ethereum wallet and say something nice or say\n              something awful!\n            </div>\n            {currentAccount && (\n              <>\n                <Button variant='contained' onClick={wave}>\n                  {!mining ? (\n                    \"Wave at me\"\n                  ) : (\n                    <CircularProgress color='inherit' />\n                  )}\n                </Button>\n                <br />\n              </>\n            )}\n\n            {/*\n             * If there is no currentAccount render this button\n             */}\n            {!currentAccount ? (\n              <Button variant='contained' onClick={connectWallet}>\n                Connect Wallet\n              </Button>\n            ) : (\n              <Button variant='contained' onClick={disconnectWallet}>\n                Disconnect Wallet\n              </Button>\n            )}\n\n            {totalWaves !== 0 && (\n              <>\n                <br />\n                <Alert severity='info'>\n                  Total number of waves = {totalWaves}\n                </Alert>\n              </>\n            )}\n          </div>\n        </div>\n      </Paper>\n    </ThemeProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}